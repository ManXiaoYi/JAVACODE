package com.my.tree;

import java.util.Comparator;

public class AVLTree<E> extends BST<E> {
	public AVLTree() {
		this(null);
	}

	public AVLTree(Comparator<E> comparator) {
		super(comparator);
	}
	
	@Override
	// 构造器
	protected Node<E> createNode(E element, Node<E> parent) {
		return new AVLNode<>(element, parent);
	} 
	
	// 初始化
	private static class AVLNode<E> extends Node<E> {
		// 高度
		int height = 1;
		
		// 构造函数
		public AVLNode(E element, Node<E> parent) {
			super(element, parent);
		}
			
		// 计算平衡因子
		public int balanceFactor() {
			int leftHeight = left == null ? 0 : ((AVLNode<E>)left).height;
			int rightHeight = right == null ? 0 : ((AVLNode<E>)right).height;
			return leftHeight - rightHeight;
		}
		
		// 计算高度
		public void updateHeight() {
			int leftHeight = left == null ? 0 : ((AVLNode<E>)left).height;
			int rightHeight = right == null ? 0 : ((AVLNode<E>)right).height;
			height = 1 + Math.max(leftHeight, rightHeight);
		}
		
		public Node<E> tallerChild() {
			int leftHeight = left == null ? 0 : ((AVLNode<E>)left).height;
			int rightHeight = right == null ? 0 : ((AVLNode<E>)right).height;
			if (leftHeight > rightHeight) return left;
			if (leftHeight < rightHeight) return right;
			return isLeftChild() ? left : right;
		}
	}
	
	// 是否平衡
	private boolean isBalanced(Node<E> node) {
		return Math.abs(((AVLNode<E>)node).balanceFactor()) <= 1;
	}
	
	// 更新高度
	private void updateHeight(Node<E> node) {
		((AVLNode<E>)node).updateHeight();
	}
	
	// 恢复平衡
	private void rebalance(Node<E> grandparent) {
		Node<E> parent = ((AVLNode<E>)grandparent).tallerChild();
		Node<E> node = ((AVLNode<E>)parent).tallerChild();
		if (parent.isLeftChild()) { // L
			if (node.isLeftChild()) { // LL
				
			} else { // LR
				
			}
			
		} else { // R
			if (node.isLeftChild()) { // RL
				
			} else { // RR
				
			}
		}
	}
	
	@Override
	// 新添加节点之后的处理
	protected void afterAdd(Node<E> node) {
		// node的父节点 不为null时 循环
		while ((node = node.parent) != null) {
			// 进入循环的都是node的父节点、祖父节点
			if (isBalanced(node)) {
				// 更新高度
				updateHeight(node);
			} else {
				// 恢复平衡 - 说明此节点 是不平衡的 & 是高度最低的不平衡节点
				rebalance(node);
				// 上面节点恢复平衡，整棵树恢复平衡
				break;
			}
		}
	}
	
	
}
